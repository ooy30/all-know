https://www.w3schools.com/html/html5_geolocation.asp

getLocation(): void{
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition((position)=>{
          const longitude = position.coords.longitude;
          const latitude = position.coords.latitude;
          console.log('longitude,latitude',longitude,latitude);
          
        });
    } else {
       console.log("No support for geolocation")
    }
  }
  
  
  
  //////between lat long 1
      var lat1 = -35.52985551178924;
    var lon1 = 100.5022;
    var lat2 = 13.7539;
    var lon2 = 100.5022;

    var R = 6371; // km
    var dLat = this.toRadData(lat2 - lat1);
    var dLon = this.toRadData(lon2 - lon1);
    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.toRadData(lat1)) * Math.cos(this.toRadData(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);

    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    var d = R * c;
    console.log("ระยะทางได้ผลลัพธ์ = " + d);

 toRadData(value: number) {
    return value * Math.PI / 180;
  }
  
  //////between lat long 2
  function findDistance() {
   var R = 6371e3; // R is earth’s radius
   var lat1 = 15.2204; // starting point lat
   var lat2 = 15.074999247921625;         // ending point lat
   var lon1 = 102.4854; // starting point lon
   var lon2 = 102.59496056508868;         // ending point lon
   var lat1radians = toRadians(lat1);
   var lat2radians = toRadians(lat2);

   var latRadians = toRadians(lat2-lat1);
   var lonRadians = toRadians(lon2-lon1);

   var a = Math.sin(latRadians/2) * Math.sin(latRadians/2) +
        Math.cos(lat1radians) * Math.cos(lat2radians) *
        Math.sin(lonRadians/2) * Math.sin(lonRadians/2);
   var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));

   var d = R * c;

   console.log(d)
}

function toRadians(val){
    var PI = 3.1415926535;
    return val / 180.0 * PI;
}
  //END
  
  
  
  
  //////turf
  
    //  var center = [longitude, latitude];
   // 
   // var options: { steps: number,units:  Units,properties:any } = {
  //    steps: 64,
   //   units: 'kilometers',
  //    properties: {test: 'test'}
//    };
   // var circle = turf.circle(center, length, options);
    
    
  npm install @turf/circle
  npm install @turf/turf
  import * as turf from '@turf/turf';
    var center = [longitude, latitude];
          var radius = this.toRadData(30);
          var units = 'kilometers';
          var options = { steps: 10, properties: { foo: 'bar' } };
          var circle = turf.circle(center, radius);
          console.log('circle', circle);


          map.addSource('circle', {
            "type": "geojson",
            "data": {
              "type": "FeatureCollection",
              "features": [circle]
            }
          });

          map.addLayer({
            "id": "circle-fill",
            "type": "fill",
            "source": "circle",
            "paint": {
              "fill-color": "pink",
              "fill-opacity": 0.2,
            }
          });

          map.addLayer({
            'id': 'circle-line',
            'type': 'line',
            'source': 'circle',
            'layout': {
              'line-join': 'round',
              'line-cap': 'round'
            },
            'paint': {
              'line-color': '#888',
              'line-width': 1
            }
          });

