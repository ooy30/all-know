 [x: string]: any;
  setTouch(name: string) {
    if (this[name].controls) {
      const controls = this[name].controls;
      _.forEach(controls, control => {
        control.markAsTouched({ onlySelf: true });
        control.markAsDirty({ onlySelf: true });
      });
    }
  }

  validate(name: string): boolean {
    this.setTouch(name);
    for (const key of Object.keys(this[name].controls)) {
      if (this[name].controls[key].invalid) {
        const invalidControl = this.elRef.nativeElement.querySelector('[formcontrolname="' + key + '"]');
        invalidControl.focus();
        break;
      }
    }
    return this[name].valid;
  }
  
  
  
  
  /////formArray
  this.headListForm = this.formData.get('headList') as FormArray;
  
  [x: string]: any;
  setTouchFormArray(name: string) {
    if (this[name].controls) {
      this[name].controls.forEach((element: any) => {
        const controls = element.controls;
        _.forEach(controls, control => {
          control.markAsTouched({ onlySelf: true });
          control.markAsDirty({ onlySelf: true });
        });
      });
    }
  }

  validateFormArray(name: string): boolean {
    this.setTouchFormArray(name);
    let notFind = true;
    this[name].controls.forEach((element: any, index: number) => {
      if(notFind)
       for (const key of Object.keys(element.controls)) {
        if (element.invalid && element.controls[key].invalid) {
          console.log(element.invalid);
          const invalidControlText = document.getElementById(key + index);
          if (invalidControlText) { invalidControlText.focus(); }
          notFind = false;
        }
      }
    });
    return this.formData.valid;
  }

 validate(): boolean {
    this.formSubmitted = true;
    for (const key of Object.keys(this.formGroup.controls)) {
      this.formGroup.controls[key].markAsTouched({ onlySelf: true });
      this.formGroup.controls[key].markAsDirty({ onlySelf: true });
    }
    for (const key of Object.keys(this.formGroup.controls)) {
      if (this.formGroup.controls[key].invalid) {
        const invalidControl = this.elRef.nativeElement.querySelector('[formcontrolname="' + key + '"]');
        if (invalidControl) {
          invalidControl.focus();
          break;
        }
      }
    }
    return this.formGroup.valid;
  }

  validateFormArray(): boolean {
    if (this.agendaListForm?.controls) {
      for (let index = 0; index < this.agendaListForm?.controls?.length; index++) {
        const element = this.agendaListForm?.controls[index] as any;
        for (const key of Object.keys(element.controls)) {
          (this.agendaListForm?.controls[index] as any)?.controls[key].markAsTouched({ onlySelf: true });
          (this.agendaListForm?.controls[index] as any)?.controls[key].markAsDirty({ onlySelf: true });
        }
      }
      for (let index = 0; index < this.agendaListForm?.controls?.length; index++) {
        const element = this.agendaListForm?.controls[index] as any;
        for (const key of Object.keys(element.controls)) {
          if (element.invalid && element.controls[key].invalid) {
            const invalidControlText = document.getElementById(`${this.prefixId}${key}${index}`);
            if (invalidControlText) { invalidControlText.focus() }
            return false;
          }
        }
      }
      return true;
    }
    return false;
  }

